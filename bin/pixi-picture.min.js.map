{"version":3,"sources":["../pixify/node_modules/browser-pack/_prelude.js","src/HardLightShader.js","src/OverlayShader.js","src/PictureRenderer.js","src/PictureShader.js","src/PictureSprite.js","src/mapFilterBlendModesToPixi.js","src"],"names":["f","exports","module","define","amd","g","window","global","self","this","pixiPicture","min","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","OverlayShader","gl","PIXI","Shader","bind","uniforms","uSampler","prototype","Object","create","constructor","PictureRenderer","renderer","ObjectRenderer","nextPow2","v","PictureShader","mapFilterBlendModesToPixi","glCore","onContextChange","quad","Quad","normalShader","drawModes","initVao","_tempClamp","Float32Array","_tempColor","_tempRect","Rectangle","_tempRect2","_tempRect3","_tempMatrix","Matrix","_bigBuf","Uint8Array","_renderTexture","BaseRenderTexture","start","flush","_getRenderTexture","minWidth","minHeight","width","height","resize","_getBuf","size","buf","render","sprite","texture","valid","blendShader","blendMode","_renderBlend","_renderNormal","shader","bindShader","state","setBlendMode","_renderInner","spriteBounds","getBounds","renderTarget","_activeRenderTarget","matrix","projectionMatrix","flipX","flipY","d","resolution","screen","fr","sourceFrame","destinationFrame","x","y","bounds","fbw","fbh","tx","ty","x_1","Math","floor","max","x_2","ceil","y_1","y_2","pixelsWidth","pixelsHeight","rt","bindTexture","renderingToScreen","root","readPixels","RGBA","UNSIGNED_BYTE","texSubImage2D","TEXTURE_2D","copyTexSubImage2D","BLEND_MODES","NORMAL","mapMatrix","toArray","uvs","_uvs","vd","vertices","computedGeometry","vertexData","x0","y0","x1","y1","x2","y2","x3","y3","upload","frame","base","baseTexture","clamp","realWidth","uTextureClamp","color","utils","hex2rgb","tint","alpha","worldAlpha","uColor","draw","WebGLRenderer","registerPlugin","PictureSprite","Sprite","_renderWebGL","updateGeometry","setObjectRenderer","plugins","picture","array","CONST","OVERLAY","HARD_LIGHT","HardLightShader","myPlugin","assign","extras"],"mappings":"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","file":"pixi-picture.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\r\n\r\n/**\r\n * @class\r\n * @extends PIXI.Shader\r\n * @memberof PIXI.tilemap\r\n * @param gl {PIXI.Shader} The WebGL shader manager this shader works for.\r\n */\r\nfunction OverlayShader(gl)\r\n{\r\n    PIXI.Shader.call(this,\r\n        gl,\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nattribute vec4 aColor;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 mapMatrix;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec2 vMapCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vMapCoord = (mapMatrix * vec3(aVertexPosition, 1.0)).xy;\\n    vTextureCoord = aTextureCoord;\\n}\\n\",\r\n        \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\nvarying vec2 vMapCoord;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uSampler[2];\\nuniform vec4 uTextureClamp;\\nuniform vec4 uColor;\\n\\nvoid main(void)\\n{\\n    vec2 textureCoord = clamp(vTextureCoord, uTextureClamp.xy, uTextureClamp.zw);\\n    vec4 source = texture2D(uSampler[0], textureCoord);\\n    vec4 target = texture2D(uSampler[1], vMapCoord);\\n\\n    //reverse hardlight\\n    //yeah, premultiplied\\n    if (source.a == 0.0) {\\n        gl_FragColor = vec4(0, 0, 0, 0);\\n        return;\\n    }\\n    vec3 Cb = source.rgb/source.a, Cs;\\n    if (target.a > 0.0) {\\n        Cs = target.rgb / target.a;\\n    }\\n    vec3 multiply = Cb * Cs * 2.0;\\n    vec3 Cs2 = Cs * 2.0 - 1.0;\\n    vec3 screen = Cb + Cs2 - Cb * Cs2;\\n    vec3 B;\\n    if (Cb.r <= 0.5) {\\n        B.r = multiply.r;\\n    } else {\\n        B.r = screen.r;\\n    }\\n    if (Cb.g <= 0.5) {\\n        B.g = multiply.g;\\n    } else {\\n        B.g = screen.g;\\n    }\\n    if (Cb.b <= 0.5) {\\n        B.b = multiply.b;\\n    } else {\\n        B.b = screen.b;\\n    }\\n    vec4 res;\\n    res.xyz = (1.0 - source.a) * Cs + source.a * B;\\n    res.a = source.a + target.a * (1.0-source.a);\\n    gl_FragColor = vec4(res.xyz * res.a, res.a);\\n}\\n\"\r\n    );\r\n    this.bind();\r\n    this.uniforms.uSampler = [0, 1];\r\n}\r\n\r\nOverlayShader.prototype = Object.create(PIXI.Shader.prototype);\r\nOverlayShader.prototype.constructor = OverlayShader;\r\nmodule.exports = OverlayShader;\r\n","\r\n\r\n/**\r\n * @class\r\n * @extends PIXI.Shader\r\n * @memberof PIXI.tilemap\r\n * @param gl {PIXI.Shader} The WebGL shader manager this shader works for.\r\n */\r\nfunction OverlayShader(gl)\r\n{\r\n    PIXI.Shader.call(this,\r\n        gl,\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nattribute vec4 aColor;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 mapMatrix;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec2 vMapCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vMapCoord = (mapMatrix * vec3(aVertexPosition, 1.0)).xy;\\n    vTextureCoord = aTextureCoord;\\n}\\n\",\r\n        \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\nvarying vec2 vMapCoord;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uSampler[2];\\nuniform vec4 uTextureClamp;\\nuniform vec4 uColor;\\n\\nvoid main(void)\\n{\\n    vec2 textureCoord = clamp(vTextureCoord, uTextureClamp.xy, uTextureClamp.zw);\\n    vec4 source = texture2D(uSampler[0], textureCoord);\\n    vec4 target = texture2D(uSampler[1], vMapCoord);\\n\\n    //reverse hardlight\\n    if (source.a == 0.0) {\\n        gl_FragColor = vec4(0, 0, 0, 0);\\n        return;\\n    }\\n    //yeah, premultiplied\\n    vec3 Cb = source.rgb/source.a, Cs;\\n    if (target.a > 0.0) {\\n        Cs = target.rgb / target.a;\\n    }\\n    vec3 multiply = Cb * Cs * 2.0;\\n    vec3 Cb2 = Cb * 2.0 - 1.0;\\n    vec3 screen = Cb2 + Cs - Cb2 * Cs;\\n    vec3 B;\\n    if (Cs.r <= 0.5) {\\n        B.r = multiply.r;\\n    } else {\\n        B.r = screen.r;\\n    }\\n    if (Cs.g <= 0.5) {\\n        B.g = multiply.g;\\n    } else {\\n        B.g = screen.g;\\n    }\\n    if (Cs.b <= 0.5) {\\n        B.b = multiply.b;\\n    } else {\\n        B.b = screen.b;\\n    }\\n    vec4 res;\\n    res.xyz = (1.0 - source.a) * Cs + source.a * B;\\n    res.a = source.a + target.a * (1.0-source.a);\\n    gl_FragColor = vec4(res.xyz * res.a, res.a);\\n}\\n\"\r\n    );\r\n    this.bind();\r\n    this.uniforms.uSampler = [0, 1];\r\n}\r\n\r\nOverlayShader.prototype = Object.create(PIXI.Shader.prototype);\r\nOverlayShader.prototype.constructor = OverlayShader;\r\nmodule.exports = OverlayShader;\r\n","var PictureShader = require('./PictureShader'),\r\n    mapFilterBlendModesToPixi = require('./mapFilterBlendModesToPixi'),\r\n    glCore = PIXI.glCore;\r\n\r\n/**\r\n * Renderer that clamps the texture so neighbour frames wont bleed on it\r\n * immitates context2d drawImage behaviour\r\n *\r\n * @class\r\n * @memberof PIXI.extras\r\n * @extends PIXI.ObjectRenderer\r\n * @param renderer {PIXI.WebGLRenderer} The renderer this plugin works for\r\n */\r\nfunction PictureRenderer(renderer) {\r\n    PIXI.ObjectRenderer.call(this, renderer);\r\n}\r\n\r\nPictureRenderer.prototype = Object.create(PIXI.ObjectRenderer.prototype);\r\nPictureRenderer.prototype.constructor = PictureRenderer;\r\n\r\nPictureRenderer.prototype.onContextChange = function () {\r\n    var gl = this.renderer.gl;\r\n    this.quad = new PIXI.Quad(gl);\r\n    this.normalShader = new PictureShader(gl);\r\n    this.drawModes = mapFilterBlendModesToPixi(gl);\r\n    this.quad.initVao(this.normalShader);\r\n    this._tempClamp = new Float32Array(4);\r\n    this._tempColor = new Float32Array(4);\r\n    this._tempRect = new PIXI.Rectangle();\r\n    this._tempRect2 = new PIXI.Rectangle();\r\n    this._tempRect3 = new PIXI.Rectangle();\r\n    this._tempMatrix = new PIXI.Matrix();\r\n    this._bigBuf = new Uint8Array(1 << 20);\r\n    this._renderTexture = new PIXI.BaseRenderTexture(1024, 1024);\r\n};\r\n\r\nPictureRenderer.prototype.start = function () {\r\n    //noop\r\n};\r\n\r\nPictureRenderer.prototype.flush = function () {\r\n    //noop\r\n};\r\n\r\nfunction nextPow2(v) {\r\n    v += v === 0;\r\n    --v;\r\n    v |= v >>> 1;\r\n    v |= v >>> 2;\r\n    v |= v >>> 4;\r\n    v |= v >>> 8;\r\n    v |= v >>> 16;\r\n    return v + 1;\r\n}\r\n\r\nPictureRenderer.prototype._getRenderTexture = function (minWidth, minHeight) {\r\n    if (this._renderTexture.width < minWidth ||\r\n        this._renderTexture.height < minHeight) {\r\n        minHeight = nextPow2(minWidth);\r\n        minHeight = nextPow2(minHeight);\r\n        this._renderTexture.resize(minWidth, minHeight);\r\n    }\r\n    return this._renderTexture;\r\n};\r\n\r\nPictureRenderer.prototype._getBuf = function (size) {\r\n    var buf = this._bigBuf;\r\n    if (buf.length < size) {\r\n        size = nextPow2(size);\r\n        buf = new Uint8Array(size);\r\n        this._bigBuf = buf;\r\n    }\r\n    return buf;\r\n};\r\n\r\n/**\r\n * Renders the picture object.\r\n *\r\n * @param sprite {PIXI.tilemap.PictureSprite} the picture to render\r\n */\r\nPictureRenderer.prototype.render = function (sprite) {\r\n    if (!sprite.texture.valid) {\r\n        return;\r\n    }\r\n    var blendShader = this.drawModes[sprite.blendMode];\r\n    if (blendShader) {\r\n        this._renderBlend(sprite, blendShader);\r\n    } else {\r\n        this._renderNormal(sprite, this.normalShader);\r\n    }\r\n};\r\n\r\nPictureRenderer.prototype._renderNormal = function (sprite, shader) {\r\n    var renderer = this.renderer;\r\n    renderer.bindShader(shader);\r\n    renderer.state.setBlendMode(sprite.blendMode);\r\n    this._renderInner(sprite, shader);\r\n};\r\n\r\nPictureRenderer.prototype._renderBlend = function (sprite, shader) {\r\n    //nothing there yet\r\n    var renderer = this.renderer;\r\n    var spriteBounds = sprite.getBounds();\r\n    var renderTarget = renderer._activeRenderTarget;\r\n    var matrix = renderTarget.projectionMatrix;\r\n    var flipX = matrix.a < 0;\r\n    var flipY = matrix.d < 0;\r\n    var resolution = renderTarget.resolution;\r\n    var screen = this._tempRect;\r\n    var fr = renderTarget.sourceFrame || renderTarget.destinationFrame;\r\n    screen.x = 0;\r\n    screen.y = 0;\r\n    screen.width = fr.width;\r\n    screen.height = fr.height;\r\n\r\n    var bounds = this._tempRect2;\r\n    var fbw = fr.width * resolution, fbh = fr.height * resolution;\r\n    bounds.x = (spriteBounds.x + matrix.tx / matrix.a) * resolution + fbw / 2;\r\n    bounds.y = (spriteBounds.y + matrix.ty / matrix.d) * resolution + fbh / 2;\r\n    bounds.width = spriteBounds.width * resolution;\r\n    bounds.height = spriteBounds.height * resolution;\r\n    if (flipX) {\r\n        bounds.y = fbw - bounds.width - bounds.x;\r\n    }\r\n    if (flipY) {\r\n        bounds.y = fbh - bounds.height - bounds.y;\r\n    }\r\n\r\n    var screenBounds = this._tempRect3;\r\n    var x_1 = Math.floor(Math.max(screen.x, bounds.x));\r\n    var x_2 = Math.ceil(Math.min(screen.x + screen.width, bounds.x + bounds.width));\r\n    var y_1 = Math.floor(Math.max(screen.y, bounds.y));\r\n    var y_2 = Math.ceil(Math.min(screen.y + screen.height, bounds.y + bounds.height));\r\n    var pixelsWidth = x_2 - x_1;\r\n    var pixelsHeight = y_2 - y_1;\r\n    if (pixelsWidth <= 0 || pixelsHeight <= 0) {\r\n        //culling\r\n        return;\r\n    }\r\n    //TODO: padding\r\n    var rt = this._getRenderTexture(pixelsWidth, pixelsHeight);\r\n    renderer.bindTexture(rt, 1);\r\n    var gl = renderer.gl;\r\n    if (renderer.renderingToScreen && renderTarget.root) {\r\n        var buf = this._getBuf(pixelsWidth * pixelsHeight * 4);\r\n        gl.readPixels(x_1, y_1, pixelsWidth, pixelsHeight, gl.RGBA, gl.UNSIGNED_BYTE, this._bigBuf);\r\n        //REVERT Y?\r\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, pixelsWidth, pixelsHeight, gl.RGBA, gl.UNSIGNED_BYTE, this._bigBuf);\r\n    } else {\r\n        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, x_1, y_1, pixelsWidth, pixelsHeight);\r\n    }\r\n\r\n    renderer.bindShader(shader);\r\n    renderer.state.setBlendMode(PIXI.BLEND_MODES.NORMAL);\r\n    if (shader.uniforms.mapMatrix) {\r\n        var mapMatrix = this._tempMatrix;\r\n        mapMatrix.a = bounds.width / rt.width / spriteBounds.width;\r\n        if (flipX) {\r\n            mapMatrix.a = -mapMatrix.a;\r\n            mapMatrix.ty = (bounds.x - x_1) / rt.width - (spriteBounds.x + spriteBounds.width) * mapMatrix.a;\r\n        } else {\r\n            mapMatrix.tx = (bounds.x - x_1) / rt.width - spriteBounds.x * mapMatrix.a;\r\n        }\r\n        mapMatrix.d = bounds.height / rt.height / spriteBounds.height;\r\n        if (flipY) {\r\n            mapMatrix.d = -mapMatrix.d;\r\n            mapMatrix.ty = (bounds.y - y_1) / rt.height - (spriteBounds.y + spriteBounds.height) * mapMatrix.d;\r\n        } else {\r\n            mapMatrix.ty = (bounds.y - y_1) / rt.height - spriteBounds.y * mapMatrix.d;\r\n        }\r\n\r\n        shader.uniforms.mapMatrix = mapMatrix.toArray(true, shader.uniforms.mapMatrix);\r\n    }\r\n\r\n    this._renderInner(sprite, shader);\r\n};\r\n\r\n\r\nPictureRenderer.prototype._renderInner = function (sprite, shader) {\r\n    var renderer = this.renderer;\r\n    var quad = this.quad;\r\n    var uvs = sprite.texture._uvs;\r\n\r\n    //sprite already has calculated the vertices. lets transfer them to quad\r\n\r\n    var vertices = quad.vertices;\r\n    var vd = sprite.computedGeometry ? sprite.computedGeometry.vertices : sprite.vertexData;\r\n    for (var i = 0; i < 8; i++) {\r\n        quad.vertices[i] = vd[i];\r\n    }\r\n\r\n    //SpriteRenderer works differently, with uint32 UVS\r\n    //but for our demo float uvs are just fine\r\n    quad.uvs[0] = uvs.x0;\r\n    quad.uvs[1] = uvs.y0;\r\n    quad.uvs[2] = uvs.x1;\r\n    quad.uvs[3] = uvs.y1;\r\n    quad.uvs[4] = uvs.x2;\r\n    quad.uvs[5] = uvs.y2;\r\n    quad.uvs[6] = uvs.x3;\r\n    quad.uvs[7] = uvs.y3;\r\n\r\n    //TODO: add baricentric coords here\r\n    quad.upload();\r\n\r\n    var frame = sprite.texture.frame;\r\n    var base = sprite.texture.baseTexture;\r\n    var clamp = this._tempClamp;\r\n    //clamping 0.5 pixel from each side to reduce border artifact\r\n    //this is our plugin main purpose\r\n    clamp[0] = frame.x / base.width + 0.5 / base.realWidth;\r\n    clamp[1] = frame.y / base.height + 0.5 / base.realWidth;\r\n    clamp[2] = (frame.x + frame.width) / base.width - 0.5 / base.realWidth;\r\n    clamp[3] = (frame.y + frame.height) / base.height - 0.5 / base.realWidth;\r\n    //take a notice that size in pixels is realWidth,realHeight\r\n    //width and height are divided by resolution\r\n    shader.uniforms.uTextureClamp = clamp;\r\n\r\n    var color = this._tempColor;\r\n    PIXI.utils.hex2rgb(sprite.tint, color);\r\n    var alpha = sprite.worldAlpha;\r\n    //premultiplied alpha tint\r\n    //of course we could do that in shader too\r\n    color[0] *= alpha;\r\n    color[1] *= alpha;\r\n    color[2] *= alpha;\r\n    color[3] = alpha;\r\n    shader.uniforms.uColor = color;\r\n\r\n    //bind texture to unit 0, our default sampler unit\r\n    renderer.bindTexture(base, 0);\r\n    quad.draw();\r\n};\r\n\r\nPIXI.WebGLRenderer.registerPlugin('picture', PictureRenderer);\r\n\r\nmodule.exports = PictureRenderer;\r\n","\r\n\r\n/**\r\n * @class\r\n * @extends PIXI.Shader\r\n * @memberof PIXI.extras\r\n * @param gl {PIXI.Shader} The WebGL shader manager this shader works for.\r\n */\r\nfunction PictureShader(gl)\r\n{\r\n    PIXI.Shader.call(this,\r\n        gl,\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nattribute vec4 aColor;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\\n\",\r\n        \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uSampler;\\nuniform vec4 uTextureClamp;\\nuniform vec4 uColor;\\n\\nvoid main(void)\\n{\\n    vec2 textureCoord = clamp(vTextureCoord, uTextureClamp.xy, uTextureClamp.zw);\\n    vec4 sample = texture2D(uSampler, textureCoord);\\n    gl_FragColor = sample * uColor;\\n}\\n\"\r\n    );\r\n    //do some stuff, like default values for shader\r\n    //dont forget to bind it if you really are changing the uniforms\r\n    this.bind();\r\n    //default tint\r\n    //Its an example, actually PictureRenderer takes care of this stuff\r\n    this.uniforms.uColor = new Float32Array(1,1,1,1);\r\n}\r\n\r\nPictureShader.prototype = Object.create(PIXI.Shader.prototype);\r\nPictureShader.prototype.constructor = PictureShader;\r\nmodule.exports = PictureShader;\r\n","/**\r\n * A Sprite with reduced border artifacts\r\n *\r\n * @class\r\n * @extends PIXI.Sprite\r\n * @memberof PIXI.tilemap\r\n * @param texture {PIXI.Texture} the texture for this sprite\r\n */\r\nfunction PictureSprite(texture)\r\n{\r\n    PIXI.Sprite.call(this, texture);\r\n}\r\n\r\nPictureSprite.prototype = Object.create(PIXI.Sprite.prototype);\r\nPictureSprite.prototype.constructor = PictureSprite;\r\nmodule.exports = PictureSprite;\r\n\r\n/**\r\n * Renders the object using the WebGL renderer\r\n *\r\n * @param renderer {PIXI.WebGLRenderer}\r\n * @private\r\n */\r\nPictureSprite.prototype._renderWebGL = function (renderer)\r\n{\r\n    if (this.updateGeometry) {\r\n        this.updateGeometry();\r\n    }\r\n\r\n    //use different plugin for rendering\r\n    renderer.setObjectRenderer(renderer.plugins.picture);\r\n    renderer.plugins.picture.render(this);\r\n};\r\n","var CONST = PIXI,\r\n    OverlayShader = require('./OverlayShader'),\r\n    HardLightShader = require('./HardLightShader');\r\n\r\n/**\r\n * Maps gl blend combinations to WebGL\r\n * @class\r\n * @memberof PIXI\r\n */\r\nfunction mapFilterBlendModesToPixi(gl, array)\r\n{\r\n    array = array || [];\r\n\r\n    //TODO - premultiply alpha would be different.\r\n    //add a boolean for that!\r\n    array[CONST.BLEND_MODES.OVERLAY] = new OverlayShader(gl);\r\n    array[CONST.BLEND_MODES.HARD_LIGHT] = new HardLightShader(gl);\r\n\r\n    return array;\r\n}\r\n\r\nmodule.exports = mapFilterBlendModesToPixi;\r\n","var myPlugin = {\r\n    PictureSprite: require('./PictureSprite'),\r\n    PictureRenderer: require('./PictureRenderer')\r\n};\r\n\r\n//dump everything into extras\r\n\r\nObject.assign(PIXI.extras, myPlugin);\r\n\r\nmodule.exports = myPlugin;\r\n"],"sourceRoot":"/source/"}