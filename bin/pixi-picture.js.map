{"version":3,"sources":["../pixify/node_modules/browser-pack/_prelude.js","src/HardLightShader.js","src/NormalShader.js","src/OverlayShader.js","src/PictureRenderer.js","src/PictureShader.js","src/PictureSprite.js","src/PictureTilingSprite.js","src/mapFilterBlendModesToPixi.js","src"],"names":[],"mappings":";;;;;;;AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACztDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"pixi-picture.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\r\nvar PictureShader = require('./PictureShader');\r\n\r\n/**\r\n * @class\r\n * @extends PIXI.Shader\r\n * @memberof PIXI.extras\r\n * @param gl {PIXI.Shader} The WebGL shader manager this shader works for.\r\n * @param tilingMode {number} 0 for default, 1 for simple tiling, 2 for tiling\r\n */\r\nfunction HardLightShader(gl, tilingMode)\r\n{\r\n    PictureShader.call(this,\r\n        gl,\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nattribute vec4 aColor;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 mapMatrix;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec2 vMapCoord;\\n%SPRITE_UNIFORMS%\\n\\nvoid main(void)\\n{\\n    %SPRITE_CODE%\\n    vMapCoord = (mapMatrix * vec3(aVertexPosition, 1.0)).xy;\\n}\\n\",\r\n        \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\nvarying vec2 vMapCoord;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uSampler[2];\\nuniform vec4 uColor;\\n%SPRITE_UNIFORMS%\\n\\nvoid main(void)\\n{\\n    %SPRITE_CODE%\\n    vec4 source = texture2D(uSampler[0], textureCoord) * uColor;\\n    vec4 target = texture2D(uSampler[1], vMapCoord);\\n\\n    //reverse hardlight\\n    if (source.a == 0.0) {\\n        gl_FragColor = vec4(0, 0, 0, 0);\\n        return;\\n    }\\n    //yeah, premultiplied\\n    vec3 Cb = source.rgb/source.a, Cs;\\n    if (target.a > 0.0) {\\n        Cs = target.rgb / target.a;\\n    }\\n    vec3 multiply = Cb * Cs * 2.0;\\n    vec3 Cs2 = Cs * 2.0 - 1.0;\\n    vec3 screen = Cb + Cs2 - Cb * Cs2;\\n    vec3 B;\\n    if (Cb.r <= 0.5) {\\n        B.r = multiply.r;\\n    } else {\\n        B.r = screen.r;\\n    }\\n    if (Cb.g <= 0.5) {\\n        B.g = multiply.g;\\n    } else {\\n        B.g = screen.g;\\n    }\\n    if (Cb.b <= 0.5) {\\n        B.b = multiply.b;\\n    } else {\\n        B.b = screen.b;\\n    }\\n    vec4 res;\\n    res.xyz = (1.0 - source.a) * Cs + source.a * B;\\n    res.a = source.a + target.a * (1.0-source.a);\\n    gl_FragColor = vec4(res.xyz * res.a, res.a);\\n}\\n\",\r\n        tilingMode\r\n    );\r\n    this.bind();\r\n    this.uniforms.uSampler = [0, 1];\r\n}\r\n\r\nHardLightShader.prototype = Object.create(PictureShader.prototype);\r\nHardLightShader.prototype.constructor = HardLightShader;\r\nmodule.exports = HardLightShader;\r\n","\r\nvar PictureShader = require('./PictureShader');\r\n\r\n/**\r\n * @class\r\n * @extends PIXI.Shader\r\n * @memberof PIXI.extras\r\n * @param gl {PIXI.Shader} The WebGL shader manager this shader works for.\r\n * @param tilingMode {number} 0 for default, 1 for simple tiling, 2 for tiling\r\n */\r\nfunction NormalShader(gl, tilingMode)\r\n{\r\n    PictureShader.call(this,\r\n        gl,\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nattribute vec4 aColor;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n%SPRITE_UNIFORMS%\\n\\nvoid main(void)\\n{\\n    %SPRITE_CODE%\\n}\\n\",\r\n        \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uSampler;\\nuniform vec4 uColor;\\n%SPRITE_UNIFORMS%\\n\\nvoid main(void)\\n{\\n    %SPRITE_CODE%\\n\\n    vec4 sample = texture2D(uSampler, textureCoord);\\n    gl_FragColor = sample * uColor;\\n}\\n\",\r\n        tilingMode\r\n    );\r\n    //do some stuff, like default values for shader\r\n    //dont forget to bind it if you really are changing the uniforms\r\n    this.bind();\r\n    //default tint\r\n    //Its an example, actually PictureRenderer takes care of this stuff\r\n    this.uniforms.uColor = new Float32Array(1,1,1,1);\r\n}\r\n\r\nNormalShader.prototype = Object.create(PictureShader.prototype);\r\nNormalShader.prototype.constructor = NormalShader;\r\nmodule.exports = NormalShader;\r\n","\r\nvar PictureShader = require('./PictureShader');\r\n\r\n/**\r\n * @class\r\n * @extends PIXI.Shader\r\n * @memberof PIXI.extras\r\n * @param gl {PIXI.Shader} The WebGL shader manager this shader works for.\r\n * @param tilingMode {number} 0 for default, 1 for simple tiling, 2 for tiling\r\n */\r\nfunction OverlayShader(gl, tilingMode)\r\n{\r\n    PictureShader.call(this,\r\n        gl,\r\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nattribute vec4 aColor;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 mapMatrix;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec2 vMapCoord;\\n%SPRITE_UNIFORMS%\\n\\nvoid main(void)\\n{\\n    %SPRITE_CODE%\\n    vMapCoord = (mapMatrix * vec3(aVertexPosition, 1.0)).xy;\\n}\\n\",\r\n        \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\nvarying vec2 vMapCoord;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uSampler[2];\\nuniform vec4 uColor;\\n%SPRITE_UNIFORMS%\\n\\nvoid main(void)\\n{\\n    %SPRITE_CODE%\\n    vec4 source = texture2D(uSampler[0], textureCoord) * uColor;\\n    vec4 target = texture2D(uSampler[1], vMapCoord);\\n\\n    //reverse hardlight\\n    if (source.a == 0.0) {\\n        gl_FragColor = vec4(0, 0, 0, 0);\\n        return;\\n    }\\n    //yeah, premultiplied\\n    vec3 Cb = source.rgb/source.a, Cs;\\n    if (target.a > 0.0) {\\n        Cs = target.rgb / target.a;\\n    }\\n    vec3 multiply = Cb * Cs * 2.0;\\n    vec3 Cb2 = Cb * 2.0 - 1.0;\\n    vec3 screen = Cb2 + Cs - Cb2 * Cs;\\n    vec3 B;\\n    if (Cs.r <= 0.5) {\\n        B.r = multiply.r;\\n    } else {\\n        B.r = screen.r;\\n    }\\n    if (Cs.g <= 0.5) {\\n        B.g = multiply.g;\\n    } else {\\n        B.g = screen.g;\\n    }\\n    if (Cs.b <= 0.5) {\\n        B.b = multiply.b;\\n    } else {\\n        B.b = screen.b;\\n    }\\n    vec4 res;\\n    res.xyz = (1.0 - source.a) * Cs + source.a * B;\\n    res.a = source.a + target.a * (1.0-source.a);\\n    gl_FragColor = vec4(res.xyz * res.a, res.a);\\n}\\n\",\r\n        tilingMode\r\n    );\r\n    this.bind();\r\n    this.uniforms.uSampler = [0, 1];\r\n}\r\n\r\nOverlayShader.prototype = Object.create(PictureShader.prototype);\r\nOverlayShader.prototype.constructor = OverlayShader;\r\nmodule.exports = OverlayShader;\r\n","var NormalShader = require('./NormalShader'),\r\n    mapFilterBlendModesToPixi = require('./mapFilterBlendModesToPixi'),\r\n    glCore = PIXI.glCore;\r\n\r\n/**\r\n * Renderer that clamps the texture so neighbour frames wont bleed on it\r\n * immitates context2d drawImage behaviour\r\n *\r\n * @class\r\n * @memberof PIXI.extras\r\n * @extends PIXI.ObjectRenderer\r\n * @param renderer {PIXI.WebGLRenderer} The renderer this plugin works for\r\n */\r\nfunction PictureRenderer(renderer) {\r\n    PIXI.ObjectRenderer.call(this, renderer);\r\n}\r\n\r\nPictureRenderer.prototype = Object.create(PIXI.ObjectRenderer.prototype);\r\nPictureRenderer.prototype.constructor = PictureRenderer;\r\n\r\nPictureRenderer.prototype.onContextChange = function () {\r\n    var gl = this.renderer.gl;\r\n    this.quad = new PIXI.Quad(gl);\r\n    this.drawModes = mapFilterBlendModesToPixi(gl);\r\n    this.normalShader = [new NormalShader(gl, 0), new NormalShader(gl, 1), new NormalShader(gl, 2)];\r\n    this.quad.initVao(this.normalShader[0]);\r\n    this._tempClamp = new Float32Array(4);\r\n    this._tempColor = new Float32Array(4);\r\n    this._tempRect = new PIXI.Rectangle();\r\n    this._tempRect2 = new PIXI.Rectangle();\r\n    this._tempRect3 = new PIXI.Rectangle();\r\n    this._tempMatrix = new PIXI.Matrix();\r\n    this._bigBuf = new Uint8Array(1 << 20);\r\n    this._renderTexture = new PIXI.BaseRenderTexture(1024, 1024);\r\n};\r\n\r\nPictureRenderer.prototype.start = function () {\r\n    //noop\r\n};\r\n\r\nPictureRenderer.prototype.flush = function () {\r\n    //noop\r\n};\r\n\r\nfunction nextPow2(v) {\r\n    v += v === 0;\r\n    --v;\r\n    v |= v >>> 1;\r\n    v |= v >>> 2;\r\n    v |= v >>> 4;\r\n    v |= v >>> 8;\r\n    v |= v >>> 16;\r\n    return v + 1;\r\n}\r\n\r\nPictureRenderer.prototype._getRenderTexture = function (minWidth, minHeight) {\r\n    if (this._renderTexture.width < minWidth ||\r\n        this._renderTexture.height < minHeight) {\r\n        minHeight = nextPow2(minWidth);\r\n        minHeight = nextPow2(minHeight);\r\n        this._renderTexture.resize(minWidth, minHeight);\r\n    }\r\n    return this._renderTexture;\r\n};\r\n\r\nPictureRenderer.prototype._getBuf = function (size) {\r\n    var buf = this._bigBuf;\r\n    if (buf.length < size) {\r\n        size = nextPow2(size);\r\n        buf = new Uint8Array(size);\r\n        this._bigBuf = buf;\r\n    }\r\n    return buf;\r\n};\r\n\r\n/**\r\n * Renders the picture object.\r\n *\r\n * @param sprite {PIXI.tilemap.PictureSprite} the picture to render\r\n */\r\nPictureRenderer.prototype.render = function (sprite) {\r\n    if (!sprite.texture.valid) {\r\n        return;\r\n    }\r\n    var tilingMode = 0;\r\n    if (sprite.tileTransform) {\r\n        //for TilingSprite\r\n        tilingMode = this.renderer.plugins.tilingSprite.isSimpleSprite(sprite) ? 1 : 2;\r\n    }\r\n\r\n    var blendShader = this.drawModes[sprite.blendMode];\r\n    if (blendShader) {\r\n        this._renderBlend(sprite, blendShader[tilingMode]);\r\n    } else {\r\n        this._renderNormal(sprite, this.normalShader[tilingMode]);\r\n    }\r\n};\r\n\r\nPictureRenderer.prototype._renderNormal = function (sprite, shader) {\r\n    var renderer = this.renderer;\r\n    renderer.bindShader(shader);\r\n    renderer.state.setBlendMode(sprite.blendMode);\r\n    this._renderInner(sprite, shader);\r\n};\r\n\r\nPictureRenderer.prototype._renderBlend = function (sprite, shader) {\r\n    //nothing there yet\r\n    var renderer = this.renderer;\r\n    var spriteBounds = sprite.getBounds();\r\n    var renderTarget = renderer._activeRenderTarget;\r\n    var matrix = renderTarget.projectionMatrix;\r\n    var flipX = matrix.a < 0;\r\n    var flipY = matrix.d < 0;\r\n    var resolution = renderTarget.resolution;\r\n    var screen = this._tempRect;\r\n    var fr = renderTarget.sourceFrame || renderTarget.destinationFrame;\r\n    screen.x = 0;\r\n    screen.y = 0;\r\n    screen.width = fr.width;\r\n    screen.height = fr.height;\r\n\r\n    var bounds = this._tempRect2;\r\n    var fbw = fr.width * resolution, fbh = fr.height * resolution;\r\n    bounds.x = (spriteBounds.x + matrix.tx / matrix.a) * resolution + fbw / 2;\r\n    bounds.y = (spriteBounds.y + matrix.ty / matrix.d) * resolution + fbh / 2;\r\n    bounds.width = spriteBounds.width * resolution;\r\n    bounds.height = spriteBounds.height * resolution;\r\n    if (flipX) {\r\n        bounds.y = fbw - bounds.width - bounds.x;\r\n    }\r\n    if (flipY) {\r\n        bounds.y = fbh - bounds.height - bounds.y;\r\n    }\r\n\r\n    var screenBounds = this._tempRect3;\r\n    var x_1 = Math.floor(Math.max(screen.x, bounds.x));\r\n    var x_2 = Math.ceil(Math.min(screen.x + screen.width, bounds.x + bounds.width));\r\n    var y_1 = Math.floor(Math.max(screen.y, bounds.y));\r\n    var y_2 = Math.ceil(Math.min(screen.y + screen.height, bounds.y + bounds.height));\r\n    var pixelsWidth = x_2 - x_1;\r\n    var pixelsHeight = y_2 - y_1;\r\n    if (pixelsWidth <= 0 || pixelsHeight <= 0) {\r\n        //culling\r\n        return;\r\n    }\r\n    //TODO: padding\r\n    var rt = this._getRenderTexture(pixelsWidth, pixelsHeight);\r\n    renderer.bindTexture(rt, 1);\r\n    var gl = renderer.gl;\r\n    if (renderer.renderingToScreen && renderTarget.root) {\r\n        var buf = this._getBuf(pixelsWidth * pixelsHeight * 4);\r\n        gl.readPixels(x_1, y_1, pixelsWidth, pixelsHeight, gl.RGBA, gl.UNSIGNED_BYTE, this._bigBuf);\r\n        //REVERT Y?\r\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, pixelsWidth, pixelsHeight, gl.RGBA, gl.UNSIGNED_BYTE, this._bigBuf);\r\n    } else {\r\n        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, x_1, y_1, pixelsWidth, pixelsHeight);\r\n    }\r\n\r\n    renderer.bindShader(shader);\r\n    renderer.state.setBlendMode(PIXI.BLEND_MODES.NORMAL);\r\n    if (shader.uniforms.mapMatrix) {\r\n        var mapMatrix = this._tempMatrix;\r\n        mapMatrix.a = bounds.width / rt.width / spriteBounds.width;\r\n        if (flipX) {\r\n            mapMatrix.a = -mapMatrix.a;\r\n            mapMatrix.ty = (bounds.x - x_1) / rt.width - (spriteBounds.x + spriteBounds.width) * mapMatrix.a;\r\n        } else {\r\n            mapMatrix.tx = (bounds.x - x_1) / rt.width - spriteBounds.x * mapMatrix.a;\r\n        }\r\n        mapMatrix.d = bounds.height / rt.height / spriteBounds.height;\r\n        if (flipY) {\r\n            mapMatrix.d = -mapMatrix.d;\r\n            mapMatrix.ty = (bounds.y - y_1) / rt.height - (spriteBounds.y + spriteBounds.height) * mapMatrix.d;\r\n        } else {\r\n            mapMatrix.ty = (bounds.y - y_1) / rt.height - spriteBounds.y * mapMatrix.d;\r\n        }\r\n\r\n        shader.uniforms.mapMatrix = mapMatrix.toArray(true, shader.uniforms.mapMatrix);\r\n    }\r\n\r\n    this._renderInner(sprite, shader);\r\n};\r\n\r\nPictureRenderer.prototype._renderInner = function (sprite, shader) {\r\n    var renderer = this.renderer;\r\n    if (shader.tilingMode > 0) {\r\n        renderer.plugins.tilingSprite.renderWithShader(sprite, shader.tilingMode === 1, shader);\r\n    } else {\r\n        this._renderSprite(sprite, shader);\r\n    }\r\n};\r\n\r\nPictureRenderer.prototype._renderSprite = function(sprite, shader) {\r\n    var renderer = this.renderer;\r\n    var quad = this.quad;\r\n    var uvs = sprite.texture._uvs;\r\n\r\n    //sprite already has calculated the vertices. lets transfer them to quad\r\n\r\n    var vertices = quad.vertices;\r\n    var vd = sprite.computedGeometry ? sprite.computedGeometry.vertices : sprite.vertexData;\r\n    for (var i = 0; i < 8; i++) {\r\n        quad.vertices[i] = vd[i];\r\n    }\r\n\r\n    //SpriteRenderer works differently, with uint32 UVS\r\n    //but for our demo float uvs are just fine\r\n    quad.uvs[0] = uvs.x0;\r\n    quad.uvs[1] = uvs.y0;\r\n    quad.uvs[2] = uvs.x1;\r\n    quad.uvs[3] = uvs.y1;\r\n    quad.uvs[4] = uvs.x2;\r\n    quad.uvs[5] = uvs.y2;\r\n    quad.uvs[6] = uvs.x3;\r\n    quad.uvs[7] = uvs.y3;\r\n\r\n    //TODO: add baricentric coords here\r\n    quad.upload();\r\n\r\n    var frame = sprite.texture.frame;\r\n    var base = sprite.texture.baseTexture;\r\n    var clamp = this._tempClamp;\r\n    //clamping 0.5 pixel from each side to reduce border artifact\r\n    //this is our plugin main purpose\r\n    var eps = 0.5 / base.resolution;\r\n    clamp[0] = (frame.x + eps) / base.width;\r\n    clamp[1] = (frame.y + eps) / base.height;\r\n    clamp[2] = (frame.x + frame.width - eps) / base.width;\r\n    clamp[3] = (frame.y + frame.height - eps) / base.height;\r\n    //take a notice that size in pixels is realWidth,realHeight\r\n    //width and height are divided by resolution\r\n    shader.uniforms.uTextureClamp = clamp;\r\n\r\n    var color = this._tempColor;\r\n    PIXI.utils.hex2rgb(sprite.tint, color);\r\n    var alpha = sprite.worldAlpha;\r\n    //premultiplied alpha tint\r\n    //of course we could do that in shader too\r\n    color[0] *= alpha;\r\n    color[1] *= alpha;\r\n    color[2] *= alpha;\r\n    color[3] = alpha;\r\n    shader.uniforms.uColor = color;\r\n\r\n    //bind texture to unit 0, our default sampler unit\r\n    renderer.bindTexture(base, 0);\r\n    quad.draw();\r\n};\r\n\r\nPIXI.WebGLRenderer.registerPlugin('picture', PictureRenderer);\r\n\r\nmodule.exports = PictureRenderer;\r\n","/**\r\n * @class\r\n * @extends PIXI.Shader\r\n * @memberof PIXI.extras\r\n * @param gl {PIXI.Shader} The WebGL shader manager this shader works for.\r\n * @param vert {string}\r\n * @param frag {string}\r\n * @param tilingMode {number} 0 for default, 1 for simple tiling, 2 for tiling\r\n */\r\nfunction PictureShader(gl, vert, frag, tilingMode) {\r\n    var lib = shaderLib[tilingMode];\r\n    PIXI.Shader.call(this,\r\n        gl,\r\n        vert.replace(/%SPRITE_UNIFORMS%/gi, lib.vertUniforms)\r\n            .replace(/%SPRITE_CODE%/gi, lib.vertCode),\r\n        frag.replace(/%SPRITE_UNIFORMS%/gi, lib.fragUniforms)\r\n            .replace(/%SPRITE_CODE%/gi, lib.fragCode)\r\n    );\r\n\r\n    this.tilingMode = tilingMode;\r\n}\r\n\r\n\r\nvar shaderLib = [\r\n    {\r\n        //DOES NOT HAVE translationMatrix\r\n        vertUniforms: \"\",\r\n        vertCode: \"gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\" + \"\\nvTextureCoord = aTextureCoord;\",\r\n        fragUniforms: \"uniform vec4 uTextureClamp;\",\r\n        fragCode: \"vec2 textureCoord = clamp(vTextureCoord, uTextureClamp.xy, uTextureClamp.zw);\"\r\n    },\r\n    {\r\n        //DOES HAVE translationMatrix\r\n        vertUniforms: \"uniform mat3 translationMatrix;\" + \"\\nuniform mat3 uTransform;\",\r\n        vertCode: \"gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\" +\r\n        \"\\nvTextureCoord = (uTransform * vec3(aTextureCoord, 1.0)).xy;\",\r\n        fragUniforms: \"\",\r\n        fragCode: \"vec2 textureCoord = vTextureCoord;\"\r\n    },\r\n    {\r\n        //DOES HAVE translationMatrix\r\n        vertUniforms: \"uniform mat3 translationMatrix;\" + \"\\nuniform mat3 uTransform;\",\r\n        vertCode: \"gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\" +\r\n        \"\\nvTextureCoord = (uTransform * vec3(aTextureCoord, 1.0)).xy;\",\r\n        fragUniforms: \"uniform mat3 uMapCoord;\\nuniform vec4 uClampFrame;\\nuniform vec2 uClampOffset;\",\r\n        fragCode: \"vec2 textureCoord = mod(vTextureCoord - uClampOffset, vec2(1.0, 1.0)) + uClampOffset;\" +\r\n        \"\\ntextureCoord = (uMapCoord * vec3(textureCoord, 1.0)).xy;\" +\r\n        \"\\ntextureCoord = clamp(textureCoord, uClampFrame.xy, uClampFrame.zw);\"\r\n    }\r\n];\r\n\r\nPictureShader.prototype = Object.create(PIXI.Shader.prototype);\r\nPictureShader.prototype.constructor = PictureShader;\r\nmodule.exports = PictureShader;\r\n","/**\r\n * A Sprite with reduced border artifacts\r\n *\r\n * @class\r\n * @extends PIXI.Sprite\r\n * @memberof PIXI.extras\r\n * @param texture {PIXI.Texture} the texture for this sprite\r\n */\r\nfunction PictureSprite(texture)\r\n{\r\n    PIXI.Sprite.call(this, texture);\r\n}\r\n\r\nPictureSprite.prototype = Object.create(PIXI.Sprite.prototype);\r\nPictureSprite.prototype.constructor = PictureSprite;\r\nmodule.exports = PictureSprite;\r\n\r\n/**\r\n * Renders the object using the WebGL renderer\r\n *\r\n * @param renderer {PIXI.WebGLRenderer}\r\n * @private\r\n */\r\nPictureSprite.prototype._renderWebGL = function (renderer)\r\n{\r\n    if (this.updateGeometry) {\r\n        this.updateGeometry();\r\n    } else {\r\n        this.calculateVertices();\r\n    }\r\n\r\n    //use different plugin for rendering\r\n    renderer.setObjectRenderer(renderer.plugins.picture);\r\n    renderer.plugins.picture.render(this);\r\n};\r\n","/**\r\n * A TilingSprite with support of additional blendModes\r\n *\r\n * @class\r\n * @extends PIXI.extras.TilingSprite\r\n * @memberof PIXI.extras\r\n * @param texture {PIXI.Texture} the texture for this sprite\r\n * @param {number} width width\r\n * @param {number} height height\r\n */\r\nfunction PictureTilingSprite(texture, width, height)\r\n{\r\n    PIXI.extras.TilingSprite.call(this, texture, width, height);\r\n}\r\n\r\nPictureTilingSprite.prototype = Object.create(PIXI.extras.TilingSprite.prototype);\r\nPictureTilingSprite.prototype.constructor = PictureTilingSprite;\r\nmodule.exports = PictureTilingSprite;\r\n\r\n/**\r\n * Renders the object using the WebGL renderer\r\n *\r\n * @param renderer {PIXI.WebGLRenderer}\r\n * @private\r\n */\r\nPictureTilingSprite.prototype._renderWebGL = function (renderer)\r\n{\r\n    if (this.updateGeometry) {\r\n        this.updateGeometry();\r\n    }\r\n\r\n    const texture = this._texture;\r\n\r\n    if (!texture || !texture.valid)\r\n    {\r\n        return;\r\n    }\r\n\r\n    this.tileTransform.updateLocalTransform();\r\n    this.uvTransform.update();\r\n\r\n    renderer.setObjectRenderer(renderer.plugins.picture);\r\n    renderer.plugins.picture.render(this);\r\n};\r\n","var CONST = PIXI,\r\n    OverlayShader = require('./OverlayShader'),\r\n    HardLightShader = require('./HardLightShader');\r\n\r\n/**\r\n * Maps gl blend combinations to WebGL\r\n * @class\r\n * @memberof PIXI.extras\r\n */\r\nfunction mapFilterBlendModesToPixi(gl, array)\r\n{\r\n    array = array || [];\r\n\r\n    //TODO - premultiply alpha would be different.\r\n    //add a boolean for that!\r\n    array[CONST.BLEND_MODES.OVERLAY] = [new OverlayShader(gl, 0), new OverlayShader(gl, 1), new OverlayShader(gl, 2)];\r\n    array[CONST.BLEND_MODES.HARD_LIGHT] = [new HardLightShader(gl, 0), new HardLightShader(gl, 1), new HardLightShader(gl, 2)];\r\n\r\n    return array;\r\n}\r\n\r\nmodule.exports = mapFilterBlendModesToPixi;\r\n","var myPlugin = {\r\n    PictureSprite: require('./PictureSprite'),\r\n    PictureTilingSprite: require('./PictureTilingSprite'),\r\n    PictureRenderer: require('./PictureRenderer')\r\n};\r\n\r\n//dump everything into extras\r\n\r\nObject.assign(PIXI.extras, myPlugin);\r\n\r\nmodule.exports = myPlugin;\r\n"],"sourceRoot":"/source/"}