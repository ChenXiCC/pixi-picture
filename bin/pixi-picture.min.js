!function e(r,n,t){function i(a,u){if(!n[a]){if(!r[a]){var s="function"==typeof require&&require;if(!u&&s)return s(a,!0);if(o)return o(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var d=n[a]={exports:{}};r[a][0].call(d.exports,function(e){var n=r[a][1][e];return i(n?n:e)},d,d.exports,e,r,n,t)}return n[a].exports}for(var o="function"==typeof require&&require,a=0;a<t.length;a++)i(t[a]);return i}({1:[function(e,r,n){function t(e){PIXI.Shader.call(this,e,"#define GLSLIFY 1\nattribute vec2 aVertexPosition;\n\nattribute vec2 aTextureCoord;\n\nattribute vec4 aColor;\n\nuniform mat3 projectionMatrix;\n\nuniform mat3 mapMatrix;\n\nvarying vec2 vTextureCoord;\n\nvarying vec2 vMapCoord;\n\nvoid main(void)\n\n{\n\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\n    vMapCoord = (mapMatrix * vec3(aVertexPosition, 1.0)).xy;\n\n    vTextureCoord = aTextureCoord;\n\n}\n\n","#define GLSLIFY 1\nvarying vec2 vTextureCoord;\n\nvarying vec2 vMapCoord;\n\nvarying vec4 vColor;\n\nuniform sampler2D uSampler[2];\n\nuniform vec4 uTextureClamp;\n\nuniform vec4 uColor;\n\nvoid main(void)\n\n{\n\n    vec2 textureCoord = clamp(vTextureCoord, uTextureClamp.xy, uTextureClamp.zw);\n\n    vec4 source = texture2D(uSampler[0], textureCoord);\n\n    vec4 target = texture2D(uSampler[1], vMapCoord);\n\n    //reverse hardlight\r\n    //yeah, premultiplied\r\n    if (source.a == 0.0) {\n\n        return;\n\n    }\n\n    vec3 Cb = source.rgb/source.a, Cs;\n\n    if (target.a > 0.0) {\n\n        Cs = target.rgb / target.a;\n\n    }\n\n    vec3 multiply = Cb * Cs * 2.0;\n\n    vec3 Cs2 = Cs * 2.0 - 1.0;\n\n    vec3 screen = Cb + Cs2 - Cb * Cs2;\n\n    vec3 B;\n\n    if (Cb.r <= 0.5) {\n\n        B.r = multiply.r;\n\n    } else {\n\n        B.r = screen.r;\n\n    }\n\n    if (Cb.g <= 0.5) {\n\n        B.g = multiply.g;\n\n    } else {\n\n        B.g = screen.g;\n\n    }\n\n    if (Cb.b <= 0.5) {\n\n        B.b = multiply.b;\n\n    } else {\n\n        B.b = screen.b;\n\n    }\n\n    vec4 res;\n\n    res.xyz = (1.0 - source.a) * Cs + source.a * B;\n\n    res.a = source.a + target.a * (1.0-source.a);\n\n    gl_FragColor = vec4(res.xyz * res.a, res.a);\n\n}\n\n"),this.bind(),this.uniforms.uSampler=[0,1]}t.prototype=Object.create(PIXI.Shader.prototype),t.prototype.constructor=t,r.exports=t},{}],2:[function(e,r,n){function t(e){PIXI.Shader.call(this,e,"#define GLSLIFY 1\nattribute vec2 aVertexPosition;\n\nattribute vec2 aTextureCoord;\n\nattribute vec4 aColor;\n\nuniform mat3 projectionMatrix;\n\nuniform mat3 mapMatrix;\n\nvarying vec2 vTextureCoord;\n\nvarying vec2 vMapCoord;\n\nvoid main(void)\n\n{\n\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\n    vMapCoord = (mapMatrix * vec3(aVertexPosition, 1.0)).xy;\n\n    vTextureCoord = aTextureCoord;\n\n}\n\n","#define GLSLIFY 1\nvarying vec2 vTextureCoord;\n\nvarying vec2 vMapCoord;\n\nvarying vec4 vColor;\n\nuniform sampler2D uSampler[2];\n\nuniform vec4 uTextureClamp;\n\nuniform vec4 uColor;\n\nvoid main(void)\n\n{\n\n    vec2 textureCoord = clamp(vTextureCoord, uTextureClamp.xy, uTextureClamp.zw);\n\n    vec4 source = texture2D(uSampler[0], textureCoord);\n\n    vec4 target = texture2D(uSampler[1], vMapCoord);\n\n    //reverse hardlight\r\n    if (source.a == 0.0) {\n\n        gl_FragColor = vec4(0, 0, 0, 0);\n\n        return;\n\n    }\n\n    //yeah, premultiplied\r\n    vec3 Cb = source.rgb/source.a, Cs;\n\n    if (target.a > 0.0) {\n\n        Cs = target.rgb / target.a;\n\n    }\n\n    vec3 multiply = Cb * Cs * 2.0;\n\n    vec3 Cb2 = Cb * 2.0 - 1.0;\n\n    vec3 screen = Cb2 + Cs - Cb2 * Cs;\n\n    vec3 B;\n\n    if (Cs.r <= 0.5) {\n\n        B.r = multiply.r;\n\n    } else {\n\n        B.r = screen.r;\n\n    }\n\n    if (Cs.g <= 0.5) {\n\n        B.g = multiply.g;\n\n    } else {\n\n        B.g = screen.g;\n\n    }\n\n    if (Cs.b <= 0.5) {\n\n        B.b = multiply.b;\n\n    } else {\n\n        B.b = screen.b;\n\n    }\n\n    vec4 res;\n\n    res.xyz = (1.0 - source.a) * Cs + source.a * B;\n\n    res.a = source.a + target.a * (1.0-source.a);\n\n    gl_FragColor = vec4(res.xyz * res.a, res.a);\n\n}\n\n"),this.bind(),this.uniforms.uSampler=[0,1]}t.prototype=Object.create(PIXI.Shader.prototype),t.prototype.constructor=t,r.exports=t},{}],3:[function(e,r,n){function t(e){PIXI.ObjectRenderer.call(this,e)}function i(e){return v+=0===v,--v,v|=v>>>1,v|=v>>>2,v|=v>>>4,v|=v>>>8,v|=v>>>16,v+1}var o=e("./PictureShader"),a=e("./mapFilterBlendModesToPixi");PIXI.glCore;t.prototype=Object.create(PIXI.ObjectRenderer.prototype),t.prototype.constructor=t,t.prototype.onContextChange=function(){var e=this.renderer.gl;this.quad=new PIXI.Quad(e),this.normalShader=new o(e),this.drawModes=a(e),this.quad.initVao(this.normalShader),this._tempClamp=new Float32Array(4),this._tempColor=new Float32Array(4),this._tempRect=new PIXI.Rectangle,this._tempRect2=new PIXI.Rectangle,this._tempRect3=new PIXI.Rectangle,this._tempMatrix=new PIXI.Matrix,this._bigBuf=new Uint8Array(1<<20),this._renderTexture=new PIXI.BaseRenderTexture(1024,1024)},t.prototype.start=function(){},t.prototype.flush=function(){},t.prototype._getRenderTexture=function(e,r){return(this._renderTexture.width<e||this._renderTexture.height<r)&&(r=i(e*resolution),r=i(r*resolution),this._renderTexture.resize(e,r)),this._renderTexture},t.prototype._getBuf=function(e){var r=this._bigBuf;return r.length<e&&(e=i(e),r=new Uint8Array(e),this._bigBuf=r),r},t.prototype.render=function(e){if(e.texture.valid){var r=this.drawModes[e.blendMode];r?this._renderBlend(e,r):this._renderNormal(e,this.normalShader)}},t.prototype._renderNormal=function(e,r){var n=this.renderer;n.bindShader(r),n.state.setBlendMode(e.blendMode),this._renderInner(e,r)},t.prototype._renderBlend=function(e,r){var n=this.renderer,t=e.getBounds(),i=n._activeRenderTarget,o=i.projectionMatrix,a=o.d<0,u=i.resolution,s=this._tempRect,c=i.sourceFrame||i.destinationFrame;s.x=0,s.y=0,s.width=c.width,s.height=c.height;var d=this._tempRect2,v=c.width*u,p=c.height*u;d.x=(t.x+o.tx/o.a)*u+v/2,d.y=(t.y+o.ty/o.d)*u+p/2,d.width=t.width*u,d.height=t.height*u,a&&(d.y=p-d.height-d.y);var h=(this._tempRect3,Math.floor(Math.max(s.x,d.x))),l=Math.ceil(Math.min(s.x+s.width,d.x+d.width)),x=Math.floor(Math.max(s.y,d.y)),m=Math.ceil(Math.min(s.y+s.height,d.y+d.height)),g=l-h,C=m-x;if(!(0>=g||0>=C)){var y=this._getRenderTexture(g,C);n.bindTexture(y,1);var f=n.gl;if(n.renderingToScreen&&i.root){this._getBuf(g*C*4);f.readPixels(h,x,g,C,f.RGBA,f.UNSIGNED_BYTE,this._bigBuf),f.texSubImage2D(f.TEXTURE_2D,0,0,0,g,C,f.RGBA,f.UNSIGNED_BYTE,this._bigBuf)}else f.copyTexSubImage2D(f.TEXTURE_2D,0,0,0,h,x,g,C);if(n.bindShader(r),n.state.setBlendMode(PIXI.BLEND_MODES.NORMAL),r.uniforms.mapMatrix){var b=this._tempMatrix;b.a=d.width/y.width/t.width,b.tx=(d.x-h)/y.width-t.x*b.a,b.d=d.height/y.height/t.height,a?(b.d=-b.d,b.ty=(d.y-x)/y.height-(t.y+t.height)*b.d):b.ty=(d.y-x)/y.height-t.y*b.d,r.uniforms.mapMatrix=b.toArray(!0,r.uniforms.mapMatrix)}this._renderInner(e,r)}},t.prototype._renderInner=function(e,r){for(var n=this.renderer,t=this.quad,i=e.texture._uvs,o=(t.vertices,0);8>o;o++)t.vertices[o]=e.vertexData[o];t.uvs[0]=i.x0,t.uvs[1]=i.y0,t.uvs[2]=i.x1,t.uvs[3]=i.y1,t.uvs[4]=i.x2,t.uvs[5]=i.y2,t.uvs[6]=i.x3,t.uvs[7]=i.y3,t.upload();var a=e.texture.frame,u=e.texture.baseTexture,s=this._tempClamp;s[0]=a.x/u.width+.5/u.realWidth,s[1]=a.y/u.height+.5/u.realWidth,s[2]=(a.x+a.width)/u.width-.5/u.realWidth,s[3]=(a.y+a.height)/u.height-.5/u.realWidth,r.uniforms.uTextureClamp=s;var c=this._tempColor;PIXI.utils.hex2rgb(e.tint,c);var d=e.worldAlpha;c[0]*=d,c[1]*=d,c[2]*=d,c[3]=d,r.uniforms.uColor=c,n.bindTexture(u,0),t.draw()},PIXI.WebGLRenderer.registerPlugin("picture",t),r.exports=t},{"./PictureShader":4,"./mapFilterBlendModesToPixi":7}],4:[function(e,r,n){function t(e){PIXI.Shader.call(this,e,"#define GLSLIFY 1\nattribute vec2 aVertexPosition;\n\nattribute vec2 aTextureCoord;\n\nattribute vec4 aColor;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n\n{\n\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n\n    vTextureCoord = aTextureCoord;\n\n}\n\n","#define GLSLIFY 1\nvarying vec2 vTextureCoord;\n\nvarying vec4 vColor;\n\nuniform sampler2D uSampler;\n\nuniform vec4 uTextureClamp;\n\nuniform vec4 uColor;\n\nvoid main(void)\n\n{\n\n    vec2 textureCoord = clamp(vTextureCoord, uTextureClamp.xy, uTextureClamp.zw);\n\n    vec4 sample = texture2D(uSampler, textureCoord);\n\n    gl_FragColor = sample * uColor;\n\n}\n\n"),this.bind(),this.uniforms.uColor=new Float32Array(1,1,1,1)}t.prototype=Object.create(PIXI.Shader.prototype),t.prototype.constructor=t,r.exports=t},{}],5:[function(e,r,n){function t(e){PIXI.Sprite.call(this,e)}t.prototype=Object.create(PIXI.Sprite.prototype),t.prototype.constructor=t,r.exports=t,t.prototype._renderWebGL=function(e){(this.transform.updated||this.textureDirty)&&(this.textureDirty=!1,this.calculateVertices()),e.setObjectRenderer(e.plugins.picture),e.plugins.picture.render(this)}},{}],6:[function(e,r,n){var t={PictureSprite:e("./PictureSprite"),PictureRenderer:e("./PictureRenderer")};Object.assign(PIXI.extras,t),r.exports=t},{"./PictureRenderer":3,"./PictureSprite":5}],7:[function(e,r,n){function t(e,r){return r=r||[],r[i.BLEND_MODES.OVERLAY]=new o(e),r[i.BLEND_MODES.HARD_LIGHT]=new a(e),r}var i=PIXI,o=e("./OverlayShader"),a=e("./HardLightShader");r.exports=t},{"./HardLightShader":1,"./OverlayShader":2}]},{},[6]);
//# sourceMappingURL=pixi-picture.min.js.map
